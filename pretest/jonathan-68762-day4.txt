1. B.
2. B.
3. B.
4. C.
5. B.

6. listOf() is immutable. mutableListOf() is mutable

7. using suspend in front of the fun

8. onPause() allows you to handle temporary 
interruptions efficiently while 
preparing for a potential complete stop of the activity

9. RecyclerView  is a more efficient way to display 
large lists of data,  especially when the data is dynamic

10. Room streamlines database interactions, 
improves code maintainability, 
and enhances app performance

11.  Retrofit is a type-safe HTTP client 
for Android and Java that simplifies 
network requests by providing 
a robust framework for handling RESTful API interactions

12. setting up everything needed for 
the activity to function properly 
when it is launched for the first time

13.LiveData notifies Observer objects 
when underlying data changes

14.Setting the android:configChanges attribute in the <activity> 
tag of AndroidManifest.xml 

15. Kotlin coroutines are generally more efficient 
and easier to use than threads and are well-suited 
for async programming tasks such as making network requests

16. no
17. yes
18. yes
19. yes
20. yes

21. 
val myList = mutableListOf(1, 2, 3)
myList.add(4)

22.
suspend fun myFunction() {
    delay(1000L)
    println("Completed")
}

23
val map = mutalbeMapOf(1 to "One", 2 to "Two")
map[3] = "Three"

24. 
val intent = Intent(this, SecondActivity::class.java)
startActivity(intent)

25.
val view = findViewById<Button>(R.id.myButton)
view.setOnClickListener {Toast.makeText(this, "Button clicked", Toast.LENGTH_SHORT).show()}
 
26. fun add(a: Int, b: Int): Int {
    return a + b
}

val result = add(5, 10)

27.
ga tau

28.
ga tau

29.
ga tau

30.
gatau

32 
gatau
